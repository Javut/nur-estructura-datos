/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelDibujo.java
 *
 * Created on 12-02-2012, 06:51:12 PM
 */
package Proyecto1;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Roberto A Pinto S
 */
public class PanelDibujo extends javax.swing.JPanel implements Observer{
   
    private Ordenamientos obj;
   
    /** Creates new form PanelDibujo */
    public PanelDibujo() {
       obj=new Ordenamientos(300); 
        initComponents();
    }


    public Ordenamientos getObj() {
        return obj;
    }

    public void setObj(Ordenamientos obj) {
       
        this.obj = obj;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
   public void paintComponent(Graphics gc)
    {
      super.paintComponent(gc);
        gc.setColor(Color.BLACK);
          
        int y=0;
            for(int i:obj.getArreglo())
            {
               
                gc.drawLine(0,y,i,y);
                
                y=y+2;
            }
            
     }
    
    
    public void repintarseleccion(Graphics g)
    {     
       super.paintComponent(g);
       obj.Seleccion(obj.getArreglo()); 
        int y=0;
            for(int i:obj.getArreglo())
            {
                g.drawLine(0,y,i,y);
                y=y+2;
            } 
        
    }
       
    
    public void repintarQuiksort(Graphics g)
    {
        super.paintComponent(g);
        
        
        obj.quiksort(obj.getArreglo(), 0, 299); 
        int y=0;
            for(int i:obj.getArreglo())
            {
                g.drawLine(0,y,i,y);
                y=y+2;
                
            }
    }
    
    public void repintarInsercion(Graphics g)
    {
        super.paintComponent(g);
        
        
        obj.Insercion(obj.getArreglo()); 
        int y=0;
            for(int i:obj.getArreglo())
            {
                g.drawLine(0,y,i,y);
                y=y+2;
                
            }
    }
    
    public void repintarDesordenar(Graphics g)
    {
        super.paintComponent(g);
        
        
        obj.desordenar(); 
        int y=0;
            for(int i:obj.getArreglo())
            {
                g.drawLine(0,y,i,y);
                y=y+2;
                
            }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        obj=(Ordenamientos)o;
        repaint();
   
    }
}
